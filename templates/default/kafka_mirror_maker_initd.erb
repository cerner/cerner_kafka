#!/bin/sh
<%# coding: UTF-8%>
# Auto-generated by Chef, do not edit!
### BEGIN INIT INFO
# Provides: kafka-mirror-maker
# Short-Description: Kafka mirror maker server
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
### END INIT INFO

USER=<%= node["kafka"]["user"] %>
SLEEP_TIME=5
CURRENT_WAIT=0
TIMEOUT=<%= node["kafka"]["shutdown_timeout"] %>
KAFKA_MAIN=kafka.tools.MirrorMaker

# build env string.
SETUP_ENV=""
<% node['kafka']['mirror_maker']['env_vars'].keys.each do |evar| -%>
<% if !node["kafka"]["mirror_maker"]["env_vars"][evar].nil? and !node["kafka"]["mirror_maker"]["env_vars"][evar].empty? -%>
SETUP_ENV="$SETUP_ENV <%= evar %>=\"<%= node["kafka"]["mirror_maker"]["env_vars"][evar] %>\""
<% end -%>
<% end -%>
if [ -n "$SETUP_ENV" ]; then
  SETUP_ENV="env $SETUP_ENV"
fi

MIRROR_PARAMS="\
<% node['kafka']['mirror_maker']['mirror_sources'].each do |src| %>
--consumer.config <%= node['kafka']['install_dir'] %>/config/<%= src %> \
<% end %>
<% if !node['kafka']['mirror_maker']['new_consumer'].nil? %>
--new.consumer \
<% end %>
--num.streams <%= node['kafka']['mirror_maker']['streams'] %> \
--producer.config <%= node['kafka']['install_dir'] %>/config/mirror_target.properties \
<% if !node['kafka']['mirror_maker']['blacklist'].nil? %>
--blacklist=\"<%= node['kafka']['mirror_maker']['blacklist'] %>\""
<% else %>
--whitelist=\"<%= node['kafka']['mirror_maker']['whitelist'] %>\""
<% end %>

# We have to pipe STDOUT here otherwise it will print logs when running script
START_SERVER_CMD="$SETUP_ENV nohup <%= node["kafka"]["install_dir"] %>/bin/kafka-mirror-start.sh $MIRROR_PARAMS >> <%= node["kafka"]['mirror_maker']["service"]["stdout"] %>  2>> <%= node["kafka"]['mirror_maker']["service"]["stderr"] %> &"

# We have to pipe STDOUT here otherwise it will print logs when running script
STOP_SERVER_CMD="<%= node["kafka"]["install_dir"] %>/bin/kafka-mirror-stop.sh >> <%= node["kafka"]['mirror_maker']["service"]["stdout"] %>  2>> <%= node["kafka"]['mirror_maker']["service"]["stderr"] %>"

start() {
  findPid
  
  if [ "" = "$FOUND_PID" ]; then
    su -l $USER -c "$START_SERVER_CMD"
      
    if [ $? -ne 0 ]; then
      echo "Error starting Kafka MirrorMaker"
      exit 1
    fi
      
    echo "Kafka MirrorMaker successfully started"
      
  else
    echo "Kafka MirrorMaker is already running"
  fi
}

stop() {
  findPid
  if [ -z "$FOUND_PID" ]; then
    echo "Kafka MirrorMaker is not running, nothing to stop"
  else
    
    while [ -n "$FOUND_PID" ]; 
    do
      echo "Attempting to shutdown Kafka MirrorMaker..."
      su -l $USER -c "$STOP_SERVER_CMD"
      
      if [ $? -ne 0 ]; then
        echo "Error stopping Kafka MirrorMaker"
        exit 1
      fi
      
      sleep $SLEEP_TIME
      CURRENT_WAIT=$CURRENT_WAIT+$SLEEP_TIME
      if [ $CURRENT_WAIT -gt $TIMEOUT ]; then
        echo "Timed out waiting for Kafka MirrorMaker to stop"
        exit 1
      fi
      findPid
    done
      
    echo "Stopped Kafka MirrorMaker"
      
  fi
}

status() {
  findPid
  if [ -z "$FOUND_PID" ]; then
    echo "Kafka MirrorMaker is not running" ; exit 1
  else
    echo "Kafka MirrorMaker is running : $FOUND_PID" 
  fi
}

findPid() {
  FOUND_PID=$(pgrep -u $USER -f $KAFKA_MAIN)
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart)
    stop
    start
  ;;
  status)
    status
  ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0
